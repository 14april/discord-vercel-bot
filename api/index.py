import os
import json
from datetime import datetime
from fastapi import FastAPI, Request, HTTPException
from nacl.signing import VerifyKey
from nacl.exceptions import BadSignatureError
from typing import Optional

# C·∫•u h√¨nh Discord Interaction Types
PING = 1
APPLICATION_COMMAND = 2
MESSAGE_COMPONENT = 3
AUTOCOMPLETE = 4
MODAL_SUBMIT = 5

# C·∫•u h√¨nh t√≠nh to√°n v√©
BLACK_TICKET_PER_MONTH = 81
RELIC_TICKET_PER_MONTH = 18

# L·∫•y PUBLIC_KEY t·ª´ bi·∫øn m√¥i tr∆∞·ªùng Vercel (B·∫ÆT BU·ªòC)
PUBLIC_KEY = os.getenv("DISCORD_PUBLIC_KEY")
if not PUBLIC_KEY:
    raise RuntimeError("DISCORD_PUBLIC_KEY environment variable is not set.")

try:
    # Kh·ªüi t·∫°o VerifyKey ƒë·ªÉ x√°c minh ch·ªØ k√Ω c·ªßa Discord
    verify_key = VerifyKey(bytes.fromhex(PUBLIC_KEY))
except Exception as e:
    print(f"Error initializing VerifyKey: {e}")
    raise

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng FastAPI
app = FastAPI()

def verify_signature(request: Request, body: bytes):
    """X√°c minh ch·ªØ k√Ω ƒë·ªÉ ƒë·∫£m b·∫£o request ƒë·∫øn t·ª´ Discord."""
    signature = request.headers.get("X-Signature-Ed25519")
    timestamp = request.headers.get("X-Signature-Timestamp")

    if not signature or not timestamp:
        raise HTTPException(status_code=401, detail="Missing signature or timestamp.")

    message = timestamp.encode() + body

    try:
        verify_key.verify(message, bytes.fromhex(signature))
    except BadSignatureError:
        raise HTTPException(status_code=401, detail="Invalid signature.")


def handle_calc_command(data: dict):
    """
    X·ª≠ l√Ω l·ªánh /calc.
    L·ªánh n√†y nh·∫≠n 3 options: ticket_type, current_tickets, months.
    """
    options = {opt['name']: opt['value'] for opt in data['options']}
    
    ticket_type = options.get('type')
    current_tickets = options.get('current_tickets')
    months = options.get('months')

    # Logic t√≠nh to√°n (lu√¥n t√≠nh t·ª´ th√°ng sau)
    per_month = BLACK_TICKET_PER_MONTH if ticket_type == "ƒëen" else RELIC_TICKET_PER_MONTH
    
    results = []
    # B·∫Øt ƒë·∫ßu t√≠nh t·ª´ th√°ng 1 (th√°ng t·ªõi)
    for i in range(1, months + 1):
        total = current_tickets + per_month * i
        results.append(f"Th√°ng {i} (Sau {i} th√°ng): **{total} v√© {ticket_type}**")

    content = (
        f"üìÖ **K·∫øt qu·∫£ d·ª± t√≠nh v√© {ticket_type}**\n"
        f"S·ªë v√© hi·ªán t·∫°i: {current_tickets} | T√≠nh trong {months} th√°ng.\n"
        "---"
        "\n" + "\n".join(results)
    )

    # Tr·∫£ v·ªÅ m·ªôt ph·∫£n h·ªìi t·∫°m th·ªùi (ph·∫£n h·ªìi theo l·ªánh Slash)
    return {
        "type": 4, # CALLBACK_TYPE.CHANNEL_MESSAGE_WITH_SOURCE
        "data": {
            "content": content,
            "flags": 64 # FLags.EPHEMERAL (ch·ªâ ng∆∞·ªùi d√πng th·∫•y)
        }
    }


# Endpoint ch√≠nh m√† Discord s·∫Ω g·ªçi
@app.post("/interactions")
async def interactions(request: Request):
    # L·∫•y body d∆∞·ªõi d·∫°ng bytes ƒë·ªÉ x√°c minh ch·ªØ k√Ω
    body = await request.body()
    
    # B∆Ø·ªöC 1: X√°c minh ch·ªØ k√Ω
    try:
        verify_signature(request, body)
    except HTTPException as e:
        return e.detail

    data = json.loads(body.decode("utf-8"))
    
    # B∆Ø·ªöC 2: X·ª≠ l√Ω PING
    if data["type"] == PING:
        # Ph·∫£n h·ªìi PONG ƒë·ªÉ Discord bi·∫øt endpoint ƒëang ho·∫°t ƒë·ªông
        return {"type": 1} # CALLBACK_TYPE.PONG
    
    # B∆Ø·ªöC 3: X·ª≠ l√Ω l·ªánh Slash
    elif data["type"] == APPLICATION_COMMAND:
        command_name = data["data"]["name"]
        
        if command_name == "calc":
            return handle_calc_command(data["data"])
        
    # N·∫øu kh√¥ng ph·∫£i l√† PING ho·∫∑c L·ªánh, tr·∫£ v·ªÅ l·ªói
    raise HTTPException(status_code=400, detail="Invalid interaction type.")


# Endpoint cho Vercel ki·ªÉm tra tr·∫°ng th√°i
@app.get("/")
def read_root():
    return {"status": "Bot WebHook is running on Vercel"}

# FastAPi c·∫ßn uvicorn ƒë·ªÉ ch·∫°y, Vercel s·∫Ω t·ª± ƒë·ªông c·∫•u h√¨nh ƒëi·ªÅu n√†y qua file vercel.json (n·∫øu c√≥)
# Tuy nhi√™n, ch·ªâ c·∫ßn FastAPI v√† requirements.txt l√† ƒë·ªß cho Vercel.
